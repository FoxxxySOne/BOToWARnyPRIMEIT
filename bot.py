import os
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATA = None  # DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel
PARKING_MAPPING = None  # DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö
CARRIER_MAPPING = None  # DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö

# –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7485656740:AAFZKdSJ44I-2c72wcsu0Cc1nainIgGA9I8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if TELEGRAM_BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
DOWNLOAD_FOLDER = r"C:\Users\Administrator\Desktop\BOToWARnyPRIMEIT\BOTANAL(auto)\data"

# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
PAGE_SIZE = 5

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def get_latest_downloaded_file(download_folder):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    files = [f for f in os.listdir(download_folder) if os.path.isfile(os.path.join(download_folder, f))]
    if not files:
        raise FileNotFoundError("–í –ø–∞–ø–∫–µ –Ω–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
    # –ò—Å–∫–ª—é—á–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, .crdownload)
    files = [f for f in files if not f.endswith(".crdownload")]
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª —Å —Å–∞–º—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    latest_file = max(files, key=lambda f: os.path.getmtime(os.path.join(download_folder, f)))
    return os.path.join(download_folder, latest_file)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def load_excel_data(file_path):
    try:
        if not file_path.endswith(('.xlsx', '.xls')):
            return "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel-—Ñ–∞–π–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª."
        global DATA
        DATA = pd.read_excel(file_path)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{DATA.head()}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = [
            '–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç', '‚Ññ', '–§–ò–û –í–æ–¥–∏—Ç–µ–ª—è', '–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è',
            '–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞', '–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤', '–ö–æ–ª-–≤–æ —à–∫.',
            '–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–ö–æ—Ä–æ–±–∫–∏ : –≤—Å–µ–≥–æ / –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
        ]
        missing_columns = [col for col in required_columns if col not in DATA.columns]
        if missing_columns:
            return f"‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}."
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        split_returns = DATA['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'].str.split('/', expand=True)
        DATA['–í—Å–µ–≥–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] = pd.to_numeric(split_returns[0], errors='coerce')
        DATA['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] = pd.to_numeric(split_returns[1], errors='coerce')
        DATA['–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] = (DATA['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] / DATA['–í—Å–µ–≥–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤']) * 100
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ "–ö–æ—Ä–æ–±–∫–∏ : –≤—Å–µ–≥–æ / –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        split_boxes = DATA['–ö–æ—Ä–æ–±–∫–∏ : –≤—Å–µ–≥–æ / –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'].str.split('/', expand=True)
        DATA['–í—Å–µ–≥–æ_–∫–æ—Ä–æ–±–æ–∫'] = pd.to_numeric(split_boxes[0], errors='coerce')
        DATA['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–∫–æ—Ä–æ–±–æ–∫'] = pd.to_numeric(split_boxes[1], errors='coerce')
        DATA['–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–æ–±–æ–∫'] = (DATA['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–∫–æ—Ä–æ–±–æ–∫'] / DATA['–í—Å–µ–≥–æ_–∫–æ—Ä–æ–±–æ–∫']) * 100
        return "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö (CSV)
def load_parking_mapping(file_path):
    try:
        global PARKING_MAPPING
        PARKING_MAPPING = pd.read_csv(file_path)
        return "‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö: {e}"

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def analyze_data():
    if DATA is None:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª."
    total_sum = DATA['–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞'].sum()
    total_fines = DATA['–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤'].sum()
    avg_items = DATA['–ö–æ–ª-–≤–æ —à–∫.'].mean()
    total_routes = len(DATA)
    routes_without_returns = len(DATA[
        (DATA['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'] == '0/0') |  
        (DATA['–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] == 0) |      
        (DATA['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'].isnull())    
    ])
    total_returns = DATA['–í—Å–µ–≥–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'].sum()
    delivered_returns = DATA['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'].sum()
    delivery_rate_returns = (delivered_returns / total_returns) * 100 if total_returns > 0 else 0
    delivery_rate_boxes = DATA['–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–æ–±–æ–∫'].mean() if '–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–æ–±–æ–∫' in DATA.columns else None
    avg_route_sum = DATA['–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞'].mean()
    net_profit = total_sum - total_fines
    message = (
        "üìä <b>–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤:</b>\n"
        "------------------------------------\n"
        "üí∞ <b>–°—É–º–º–∞ –ø—É—Ç–µ–≤—ã—Ö:</b> {:.2f}\n"
        "‚ö†Ô∏è <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤:</b> {:.2f}\n"
        "üì¶ <b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –®–ö:</b> {:.2f}\n"
        "üöó <b>–ö–æ–ª-–≤–æ –ø—É—Ç–µ–≤—ã—Ö:</b> {}\n"
        "üîÑ <b>–ö–æ–ª-–≤–æ –ø—É—Ç–µ–≤—ã—Ö –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:</b> {}\n"
        "\n"
        "üöö <b>–í–æ–∑–≤—Ä–∞—Ç—ã:</b>\n"
        "   ‚Ä¢ –í—Å–µ–≥–æ: {}\n"
        "   ‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {}\n"
        "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {:.2f}%\n"
        "\n"
        "üì¶ <b>–ö–æ—Ä–æ–±–∫–∏:</b>\n"
        "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {:.2f}%\n"
        "\n"
        "üìà <b>–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞:</b> {:.2f}\n"
        "üíµ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–û–±—â–∞—è —Å—É–º–º–∞ - –®—Ç—Ä–∞—Ñ—ã):</b> {:.2f}\n"
    ).format(
        total_sum, total_fines, avg_items, total_routes, routes_without_returns,
        total_returns, delivered_returns, delivery_rate_returns,
        delivery_rate_boxes, avg_route_sum, net_profit
    )
    return message

# –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –ø—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã"
async def show_all_routes(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    if DATA is None:
        await update.callback_query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª.")
        return
    total_routes = len(DATA)
    total_pages = (total_routes // PAGE_SIZE) + (1 if total_routes % PAGE_SIZE != 0 else 0)
    if page < 0 or page >= total_pages:
        page = 0
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    paginated_data = DATA.iloc[start_index:end_index]
    keyboard = []
    for _, row in paginated_data.iterrows():
        route_info = (
            f"üöó –ü–∞—Ä–∫–æ–≤–∫–∞ {row['–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç'][:5]}, "
            f"‚Ññ{row['‚Ññ']}, "
            f"{row['–§–ò–û –í–æ–¥–∏—Ç–µ–ª—è']}, "
            f"üìÖ {row['–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è']}"
        )
        callback_data = f"route_{row['‚Ññ']}"
        keyboard.append([InlineKeyboardButton(route_info, callback_data=callback_data)])
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_routes_page_{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"all_routes_page_{page + 1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("üìã <b>–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤:</b>", reply_markup=reply_markup, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
async def handle_route_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    route_number = query.data.split('_')[1]
    route_data = DATA[DATA['‚Ññ'] == int(route_number)]
    if route_data.empty:
        await query.message.reply_text("‚ùå –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    row = route_data.iloc[0]
    matching_parking = PARKING_MAPPING[PARKING_MAPPING['route_id'] == row['–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç'][:5]]
    parking_number = matching_parking['parking_number'].values[0] if not matching_parking.empty else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞"
    message = (
        "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç–µ–≤–æ–º –ª–∏—Å—Ç–µ ‚Ññ{}</b>\n"
        "------------------------------------\n"
        "üöó <b>–ü–∞—Ä–∫–æ–≤–∫–∞:</b> {}\n"
        "üë®‚Äç‚úàÔ∏è <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {}\n"
        "üìÖ <b>–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {}\n"
        "\n"
        "üí∞ <b>–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞:</b> {:.2f}\n"
        "‚ö†Ô∏è <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤:</b> {:.2f}\n"
        "üì¶ <b>–ö–æ–ª-–≤–æ –®–ö:</b> {}\n"
        "\n"
        "üîÑ <b>–í–æ–∑–≤—Ä–∞—Ç—ã:</b> {}\n"
        "üì¶ <b>–ö–æ—Ä–æ–±–∫–∏:</b> {}\n"
    ).format(
        row['‚Ññ'], parking_number, row['–§–ò–û –í–æ–¥–∏—Ç–µ–ª—è'], row['–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è'],
        row['–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞'], row['–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤'], row['–ö–æ–ª-–≤–æ —à–∫.'],
        row['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'], row['–ö–æ—Ä–æ–±–∫–∏ : –≤—Å–µ–≥–æ / –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ']
    )
    await query.message.reply_text(message, parse_mode="HTML")

# –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π"
async def show_drivers_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    if DATA is None:
        await update.callback_query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª.")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = DATA['–§–ò–û –í–æ–¥–∏—Ç–µ–ª—è'].unique()
        total_drivers = len(drivers)
        total_pages = (total_drivers // PAGE_SIZE) + (1 if total_drivers % PAGE_SIZE != 0 else 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 0 or page >= total_pages:
            page = 0

        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_index = page * PAGE_SIZE
        end_index = start_index + PAGE_SIZE
        paginated_drivers = drivers[start_index:end_index]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = [[InlineKeyboardButton(driver, callback_data=f"driver_{driver}")] for driver in paginated_drivers]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"drivers_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"drivers_page_{page + 1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text(
            f"üë• <b>–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
        await update.callback_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
async def handle_driver_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    driver_name = query.data.split('_')[1]
    driver_data = DATA[DATA['–§–ò–û –í–æ–¥–∏—Ç–µ–ª—è'] == driver_name]
    if driver_data.empty:
        await query.message.reply_text("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    message = f"üë®‚Äç‚úàÔ∏è <b>–ü—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è {driver_name}:</b>\n"
    for _, row in driver_data.iterrows():
        message += (
            "-\n"
            "üìã <b>–ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç ‚Ññ{}</b>\n"
            "üöó –ü–∞—Ä–∫–æ–≤–∫–∞: {}\n"
            "üìÖ –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {}\n"
            "üí∞ –°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞: {:.2f}\n"
            "‚ö†Ô∏è –°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤: {:.2f}\n"
            "üì¶ –ö–æ–ª-–≤–æ –®–ö: {}\n"
            "üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã: {}\n"
            "üì¶ –ö–æ—Ä–æ–±–∫–∏: {}\n"
        ).format(
            row['‚Ññ'], row['–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç'][:5], row['–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è'],
            row['–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞'], row['–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤'], row['–ö–æ–ª-–≤–æ —à–∫.'],
            row['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'], row['–ö–æ—Ä–æ–±–∫–∏ : –≤—Å–µ–≥–æ / –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ']
        )
    await query.message.reply_text(message, parse_mode="HTML")

# –í—ã–±–æ—Ä –ø–∞—Ä–∫–æ–≤–∫–∏
async def choose_parking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if PARKING_MAPPING is None or DATA is None:
        await update.callback_query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ "–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç"
        unique_routes = DATA['–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç'].str[:5].unique()
        unique_routes = pd.Series(unique_routes).astype(str).str.strip()
        PARKING_MAPPING['route_id'] = PARKING_MAPPING['route_id'].astype(str).str.strip()
        filtered_parking = PARKING_MAPPING[PARKING_MAPPING['route_id'].isin(unique_routes)]
        if filtered_parking.empty:
            await update.callback_query.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return
        parking_numbers = filtered_parking['parking_number'].unique()
        keyboard = [[InlineKeyboardButton(f"üìç –ü–∞—Ä–∫–æ–≤–∫–∞ {num}", callback_data=f"parking_{num}")] for num in parking_numbers]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∫–æ–≤–∫—É:", reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∫–æ–≤–∫–∏: {e}")
        await update.callback_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∫–æ–≤–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–æ–≤–∫–∏
async def handle_parking_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parking_number = int(query.data.split('_')[1])
    analysis_message = analyze_parking(parking_number)
    await query.message.reply_text(analysis_message, parse_mode="HTML")

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–∏
def analyze_parking(parking_number):
    if PARKING_MAPPING is None or DATA is None:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    parking_info = PARKING_MAPPING[PARKING_MAPPING['parking_number'] == parking_number]
    if parking_info.empty:
        return f"‚ùå –ü–∞—Ä–∫–æ–≤–∫–∞ {parking_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    route_id = parking_info.iloc[0]['route_id']
    filtered_data = DATA[DATA['–õ–æ–≥. –º–∞—Ä—à—Ä—É—Ç'].str[:5] == str(route_id)]
    if filtered_data.empty:
        return f"‚ùå –î–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏ {parking_number} (–ú–∞—Ä—à—Ä—É—Ç {route_id}) –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    total_sum = filtered_data['–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞'].sum()
    total_fines = filtered_data['–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤'].sum()
    avg_items = filtered_data['–ö–æ–ª-–≤–æ —à–∫.'].mean()
    total_routes = len(filtered_data)
    routes_without_returns = len(filtered_data[
        (filtered_data['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'] == '0/0') |  
        (filtered_data['–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤'] == 0) |      
        (filtered_data['–í–æ–∑–≤—Ä–∞—Ç—ã: –≤—Å–µ–≥–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'].isnull())    
    ])
    total_returns = filtered_data['–í—Å–µ–≥–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'].sum()
    delivered_returns = filtered_data['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_–≤–æ–∑–≤—Ä–∞—Ç–æ–≤'].sum()
    delivery_rate_returns = (delivered_returns / total_returns) * 100 if total_returns > 0 else 0
    delivery_rate_boxes = filtered_data['–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–æ–±–æ–∫'].mean() if '–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–æ–±–æ–∫' in filtered_data.columns else None
    avg_route_sum = filtered_data['–°—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞'].mean()
    net_profit = total_sum - total_fines
    message = (
        "üìä <b>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏ {}:</b>\n"
        "------------------------------------\n"
        "üí∞ <b>–°—É–º–º–∞ –ø—É—Ç–µ–≤—ã—Ö:</b> {:.2f}\n"
        "‚ö†Ô∏è <b>–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤:</b> {:.2f}\n"
        "üì¶ <b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –®–ö:</b> {:.2f}\n"
        "üöó <b>–ö–æ–ª-–≤–æ –ø—É—Ç–µ–≤—ã—Ö:</b> {}\n"
        "üîÑ <b>–ö–æ–ª-–≤–æ –ø—É—Ç–µ–≤—ã—Ö –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:</b> {}\n"
        "\n"
        "üöö <b>–í–æ–∑–≤—Ä–∞—Ç—ã:</b>\n"
        "   ‚Ä¢ –í—Å–µ–≥–æ: {}\n"
        "   ‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {}\n"
        "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {:.2f}%\n"
        "\n"
        "üì¶ <b>–ö–æ—Ä–æ–±–∫–∏:</b>\n"
        "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {:.2f}%\n"
        "\n"
        "üìà <b>–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞:</b> {:.2f}\n"
        "üíµ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–û–±—â–∞—è —Å—É–º–º–∞ - –®—Ç—Ä–∞—Ñ—ã):</b> {:.2f}\n"
    ).format(
        parking_number, total_sum, total_fines, avg_items, total_routes, routes_without_returns,
        total_returns, delivered_returns, delivery_rate_returns,
        delivery_rate_boxes, avg_route_sum, net_profit
    )
    return message

# –ö–æ–º–∞–Ω–¥–∞ "–í—ã–≥—Ä—É–∑–∏—Ç—å –ü—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å"
async def download_and_analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞
        from scripts.download_script import main as download_file
        download_file()
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path = get_latest_downloaded_file(DOWNLOAD_FOLDER)
        if not file_path or not os.path.exists(file_path):
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        load_message = load_excel_data(file_path)
        await message.reply_text(load_message)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö
        parking_file_path = os.path.join(DOWNLOAD_FOLDER, "parking_mapping.csv")
        parking_load_message = load_parking_mapping(parking_file_path)
        await message.reply_text(parking_load_message)
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        analysis_message = analyze_data()
        await message.reply_text(analysis_message, parse_mode="HTML")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("–í—Å–µ –ø—É—Ç–µ–≤—ã–µ –ª–∏—Å—Ç—ã", callback_data="show_all_routes")],
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="show_drivers_list")],
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É", callback_data="choose_parking")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞", callback_data="download_previous_day")],
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é", callback_data="upload_manual_file")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Ç–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "download_previous_day":
        await download_and_analyze(query, context)
    elif query.data == "show_all_routes":
        await show_all_routes(update, context)
    elif query.data.startswith("route_"):
        await handle_route_choice(update, context)
    elif query.data.startswith("driver_"):
        await handle_driver_choice(update, context)
    elif query.data.startswith("parking_"):
        await handle_parking_choice(update, context)
    elif query.data.startswith("all_routes_page_"):
        page = int(query.data.split('_')[-1])
        await show_all_routes(update, context, page=page)
    elif query.data.startswith("drivers_page_"):
        page = int(query.data.split('_')[-1])
        await show_drivers_list(update, context, page=page)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback, pattern="^download_previous_day$"))
    app.add_handler(CallbackQueryHandler(show_all_routes, pattern="^show_all_routes$"))
    app.add_handler(CallbackQueryHandler(show_drivers_list, pattern="^show_drivers_list$"))
    app.add_handler(CallbackQueryHandler(handle_route_choice, pattern="^route_"))
    app.add_handler(CallbackQueryHandler(handle_driver_choice, pattern="^driver_"))
    app.add_handler(CallbackQueryHandler(choose_parking, pattern="^choose_parking$"))
    app.add_handler(CallbackQueryHandler(handle_parking_choice, pattern="^parking_"))
    app.add_handler(CallbackQueryHandler(button_callback, pattern="^all_routes_page_|^drivers_page_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
